<?php

require_once 'DatabaseRobot.php';
require_once 'DebugRobot.php';

/**
 * CLASS: SecretaryRobot
 * The SecretaryRobot handles any information transfer 
 * regarding student selection and student information
 * transfer between the other robots. It does not handle
 * registration or reservation, only selection and display.
 */
class SecretaryRobot {

    // Assigns itself a specific student
    public static Student $assigned_student;

    /**
     * Select a student from the database using the provided
     * student ID. This ensures that the student exists
     * in the database before any information is used by
     * the secretary in the views. This also ensures that 
     * there is always an ID associated with the selected student,
     * becuase the ID is autogenerated from an AUTOINCREMENT in
     * the database.
     */
    public static function select_student($student_id) {

        // Find the student
        $sql_query = <<<SQL
        SELECT *
        FROM table_students
        WHERE student_id='$student_id'
        SQL;
        $sql_result = DatabaseRobot::get($sql_query);

        // Create a new student object from the information
        $selected_student = new Student(
            $sql_result[0]['student_id'],
            $sql_result[0]['student_firstname'],
            $sql_result[0]['student_lastname'],
            $sql_result[0]['student_email']
        );

        // Assign itself the student
        self::$assigned_student = $selected_student;
        return self::$assigned_student;
    }

    /**
     * Deselect associated student by creating a null student
     * with null values. Used after delete operations.
     */
    public static function select_none() {
        self::$assigned_student = new Student(NULL, NULL, NULL, NULL);
    }

    /**
     * Shows information on the current assigned student's full name.
     * Returns a no student selected string if the ID is missing,
     * which means it is a null student selection.
     */
    public static function show_current_student_name() {
        if (empty(self::$assigned_student) || self::$assigned_student->id == NULL) {
            echo "No student selected";
        } else {
            $student_name = self::$assigned_student->firstname . " " . self::$assigned_student->lastname;
            $student_email = "(" . self::$assigned_student->email . ")";
            $student_id = "(SN#" . self::$assigned_student->id . ")";
            echo $student_name . " " . $student_email . " " . $student_id;
        }
    }

    /**
     * Gets the assigned student's first name.
     */
    public static function get_student_firstname() {
        if (empty(self::$assigned_student) || self::$assigned_student->id == NULL) {
            return "No student selected";
        } else {
            return self::$assigned_student->firstname;
        }
    }

    /**
     * Gets the assigned student's last name.
     */
    public static function get_student_lastname() {
        if (empty(self::$assigned_student) || self::$assigned_student->id == NULL) {
            return "No student selected";
        } else {
            return self::$assigned_student->lastname;
        }
    }

    /**
     * Gets the assigned student's email.
     */
    public static function get_student_email() {
        if (empty(self::$assigned_student) || self::$assigned_student->id == NULL) {
            return "No student selected";
        } else {
            return self::$assigned_student->email;
        }
    }
}
